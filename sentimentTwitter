import tweepy
from tweepy import OAuthHandler
import re
import numpy as np
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

class TwitterClient(object):
    def __init__(self):
        consumer_key = '---'
        consumer_secret = '---'
        access_token = '---'
        access_token_secret = '---'

        try:
            self.auth = OAuthHandler(consumer_key,consumer_secret)
            self.auth.set_access_token(access_token,access_token_secret)
            self.api = tweepy.API(self.auth)
        except:
            print("Error: Authentication Failed")

    def clean_tweet(self,tweet): #removing unnecesary characters, stopwords, symbols
        if type(tweet) == np.float:
            return ""
        r = tweet.lower()
        r = re.sub("'", "", r)
        r = re.sub("@[A-Za-z0-9_]+", "", r)
        r = re.sub("#[A-Za-z0-9_]+", "", r)
        r = re.sub(r'http\S+', '', r)
        r = re.sub('[()!?]', ' ', r)
        r = re.sub('\[.*?\]', ' ', r)
        r = re.sub("[^a-z0-9]", " ", r)
        r = r.split()
        stopwords = ["for", "on", "an", "a", "of", "and", "in", "the", "to", "from"]
        r = [w for w in r if not w in stopwords]
        r = " ".join(word for word in r)
        return r

    def get_tweet_sentiment(self,tweet):
        analysis = SentimentIntensityAnalyzer()
        sentiment_dict = analysis.polarity_scores(self.clean_tweet(tweet))

        if sentiment_dict['compound'] >= 0.05:
            return "positive"
        elif sentiment_dict['compound'] <= - 0.05:
            return "negative"
        else:
            return "neutral"

    def get_tweets(self,query,count):
        tweets = []
        try:
            fetched_tweets = self.api.search_tweets(q = query, count = count)
            for tweet in fetched_tweets:
                parsed_tweet = {}

                parsed_tweet['text'] = tweet.text

                parsed_tweet['sentiment'] = self.get_tweet_sentiment(tweet.text)

                if tweet.retweet_count > 0:
                    if parsed_tweet not in tweets:
                        tweets.append(parsed_tweet)
                else:
                    tweets.append(parsed_tweet)
            return tweets

        except tweepy.TweepError as e:
            print("Error : " + str(e))
